{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAAM,EAAQ,SAAS,aAAa,CAAC,SAEjC,EAAQ,EAAM,OAAO,CAAC,EAAE,CACxB,EAAa,EAAG,EAAM,IAAI,EAE9B,SAAS,EAAS,CAAG,EACnB,IAAM,EAAM,WAAW,EAAI,OAAO,CAAC,QAAS,KAE5C,OAAO,MAAM,GAAO,EAAI,IAAI,GAAG,WAAW,GAAK,CACjD,CAIA,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EACE,IAAM,EAAQ,EAAM,MAAM,CAAC,OAAO,CAAC,MAC7B,EAAM,EAAM,MAAM,CAAC,OAAO,CAAC,MAEjC,GAAI,EAAO,CACT,IAAM,EAAQ,EAAM,SAAS,CACvB,EAAW,EAAG,GACd,EAAW,EAAM,SAAS,CAAC,MAAM,CAAC,UAExC,EAAQ,IAAI,CAAC,SAAC,CAAA,CAAG,CAAjB,EACE,IAAM,EAAa,EACd,GAA2B,MAAA,CAAzB,EAAE,KAAK,CAAC,EAAM,CAAC,SAAS,EAC1B,GAA2B,MAAA,CAAzB,EAAE,KAAK,CAAC,EAAM,CAAC,SAAS,EACzB,EAAc,EACf,GAA2B,MAAA,CAAzB,EAAE,KAAK,CAAC,EAAM,CAAC,SAAS,EAC1B,GAA2B,MAAA,CAAzB,EAAE,KAAK,CAAC,EAAM,CAAC,SAAS,SAE/B,AAAI,AAAC,MAAM,EAAS,KAAiB,MAAM,EAAS,IAI7C,EAAW,aAAa,CAAC,GAHvB,EAAS,GAAc,EAAS,EAI3C,GAEA,EAAM,SAAS,CAAG,GAElB,EAAQ,OAAO,CAAC,SAAC,CAAjB,EAAyB,OAAA,EAAM,WAAW,CAAC,E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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar table = document.querySelector(\"table\");\n// const thead = table.tHead;\nvar tbody = table.tBodies[0];\nvar tbodyRows = _to_consumable_array(tbody.rows);\nfunction toNumber(str) {\n    var num = parseFloat(str.replace(/[$,]/g, \"\"));\n    return isNaN(num) ? str.trim().toLowerCase() : num;\n}\n// TABLE\n// eslint-disable-next-line no-shadow\ntable.addEventListener(\"click\", function(event) {\n    var title = event.target.closest(\"th\");\n    var row = event.target.closest(\"tr\");\n    if (title) {\n        var index = title.cellIndex;\n        var newRows = _to_consumable_array(tbodyRows);\n        var isSorted = title.classList.toggle(\"sorted\");\n        newRows.sort(function(a, b) {\n            var valueFirst = isSorted ? \"\".concat(b.cells[index].innerHTML) : \"\".concat(a.cells[index].innerHTML);\n            var valueSecond = isSorted ? \"\".concat(a.cells[index].innerHTML) : \"\".concat(b.cells[index].innerHTML);\n            if (!isNaN(toNumber(valueFirst)) && !isNaN(toNumber(valueSecond))) return toNumber(valueFirst) - toNumber(valueSecond);\n            return valueFirst.localeCompare(valueSecond);\n        });\n        tbody.innerHTML = \"\";\n        // eslint-disable-next-line no-shadow\n        newRows.forEach(function(row) {\n            return tbody.appendChild(row);\n        });\n    }\n    if (row && row.rowIndex !== 0 && row.rowIndex !== tbodyRows.length - 1) {\n        var countActive = 0;\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = tbodyRows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var r = _step.value;\n                if (r.classList.contains(\"active\")) countActive++;\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        row.classList.toggle(\"active\", countActive < 1);\n    }\n});\nvar body = document.body;\nvar form = document.createElement(\"form\");\n// FORM\nform.classList.add(\"new-employee-form\");\nform.innerHTML = '\\n<label>Name: <input name=\\'name\\' type=\\'text\\' data-qa=\"name\" required></label>\\n<label>Position: <input name=\\'position\\' type=\\'text\\' data-qa=\"position\" required></label>\\n<label>Office:\\n  <select name=\"office\" id=\"office\" data-qa=\"office\" required>\\n    <option value=\"tokyo\">Tokyo</option>\\n    <option value=\"singapore\">Singapore</option>\\n    <option value=\"london\">London</option>\\n    <option value=\"new york\">New York</option>\\n    <option value=\"edinburgh\">Edinburgh</option>\\n    <option value=\"san francisco\">San Francisco</option>\\n  </select>\\n</label>\\n<label>Age: <input name=\\'age\\' type=\\'number\\' data-qa=\"age\" required> </label>\\n<label>Salary: <input name=\\'salary\\' type=\\'number\\' data-qa=\"salary\" required> </label>\\n<button type=\\'submit\\'>Save to table</button>\\n';\nbody.appendChild(form);\n// BUTTON\nvar button = body.querySelector(\"[type='submit']\");\nvar createRow = function(data) {\n    var row = document.createElement(\"tr\");\n    var convertToString = function(num) {\n        if (num === null || num === undefined || isNaN(+num)) return \"\";\n        return \"$\".concat((+num).toLocaleString(\"en-US\"));\n    };\n    row.innerHTML = \"\\n    <td>\".concat(data.name, \"</td>\\n    <td>\").concat(data.position, \"</td>\\n    <td>\").concat(data.office, \"</td>\\n    <td>\").concat(data.age, \"</td>\\n    <td>\").concat(convertToString(data.salary), \"</td>\\n  \");\n    tbody.appendChild(row);\n    tbody = table.tBodies[0];\n    tbodyRows = _to_consumable_array(tbody.rows);\n};\n// NOTIFICATION\nvar pushNotification = function(posRight, title, description, type) {\n    var posTop = body.offsetHeight / 2 - body.getBoundingClientRect().top;\n    var notification = document.createElement(\"div\");\n    var h2 = document.createElement(\"h2\");\n    var p = document.createElement(\"p\");\n    notification.classList.add(\"notification\");\n    notification.classList.add(type);\n    notification.setAttribute(\"data-qa\", \"notification\");\n    notification.style.top = \"\".concat(posTop, \"px\");\n    notification.style.right = \"\".concat(posRight, \"px\");\n    h2.textContent = title;\n    p.textContent = description;\n    notification.append(h2, p);\n    body.appendChild(notification);\n    setTimeout(function() {\n        return notification.style.display = \"none\";\n    }, 2000);\n};\nbutton.addEventListener(\"click\", function(e) {\n    e.preventDefault();\n    var formData = new FormData(form);\n    var data = Object.fromEntries(formData.entries());\n    var isValide = function() {\n        var checkInput = Object.values(data).every(function(val) {\n            return val !== \"\";\n        });\n        var checkName = data.name.length >= 4;\n        var checkAge = data.age >= 18 && data.age <= 90;\n        if (checkInput && checkName && checkAge) return true;\n        return false;\n    };\n    if (isValide()) {\n        createRow(data);\n        pushNotification(10, \"Success\", \"Data added successfully\", \"success\");\n        form.reset();\n    } else pushNotification(10, \"Error\", \"Please fill in all fields and check valid values\", \"error\"); // eslint-disable-line\n});\n// DBLCLICK\n// eslint-disable-next-line no-shadow\ntbody.addEventListener(\"dblclick\", function(event) {\n    var cell = event.target.closest(\"td\");\n    if (cell && cell.cellIndex !== undefined) {\n        var initialValue = cell.textContent.trim();\n        var input = document.createElement(\"input\");\n        input.type = \"text\";\n        // input.value = initialValue.replace(/[$,]/g, '');\n        input.classList.add(\"cell-input\");\n        cell.innerHTML = \"\";\n        cell.appendChild(input);\n        input.focus();\n        var saveValue = function() {\n            var newValue = input.value.trim();\n            if (cell.cellIndex === 4) {\n                // Перевіряємо чи введено коректне числове значення\n                var parsedValue = parseFloat(newValue.replace(/[$,]/g, \"\"));\n                if (isNaN(parsedValue) || parsedValue < 0) // Якщо некоректне значення, повертаємо попереднє\n                cell.textContent = \"$\".concat((+initialValue.replace(/[$,]/g, \"\")).toLocaleString(\"en-US\"));\n                else // Форматуємо число як зарплату\n                cell.textContent = \"$\".concat(parsedValue.toLocaleString(\"en-US\"));\n            } else if (newValue) // Для інших комірок просто оновлюємо значення\n            cell.textContent = newValue;\n            else // Якщо порожнє, повертаємо початкове значення\n            cell.textContent = initialValue;\n            // Видаляємо поле вводу після збереження\n            input.remove();\n        };\n        input.addEventListener(\"blur\", saveValue);\n        input.addEventListener(\"keydown\", function(e) {\n            if (e.key === \"Enter\") saveValue();\n        });\n    }\n});\n\n//# sourceMappingURL=index.df27921e.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\n// const thead = table.tHead;\nlet tbody = table.tBodies[0];\nlet tbodyRows = [...tbody.rows];\n\nfunction toNumber(str) {\n  const num = parseFloat(str.replace(/[$,]/g, ''));\n\n  return isNaN(num) ? str.trim().toLowerCase() : num;\n}\n// TABLE\n\n// eslint-disable-next-line no-shadow\ntable.addEventListener('click', (event) => {\n  const title = event.target.closest('th');\n  const row = event.target.closest('tr');\n\n  if (title) {\n    const index = title.cellIndex;\n    const newRows = [...tbodyRows];\n    const isSorted = title.classList.toggle('sorted');\n\n    newRows.sort((a, b) => {\n      const valueFirst = isSorted\n        ? `${b.cells[index].innerHTML}`\n        : `${a.cells[index].innerHTML}`;\n      const valueSecond = isSorted\n        ? `${a.cells[index].innerHTML}`\n        : `${b.cells[index].innerHTML}`;\n\n      if (!isNaN(toNumber(valueFirst)) && !isNaN(toNumber(valueSecond))) {\n        return toNumber(valueFirst) - toNumber(valueSecond);\n      }\n\n      return valueFirst.localeCompare(valueSecond);\n    });\n\n    tbody.innerHTML = '';\n    // eslint-disable-next-line no-shadow\n    newRows.forEach((row) => tbody.appendChild(row));\n  }\n\n  if (row && row.rowIndex !== 0 && row.rowIndex !== tbodyRows.length - 1) {\n    let countActive = 0;\n\n    for (const r of tbodyRows) {\n      if (r.classList.contains('active')) {\n        countActive++;\n      }\n    }\n\n    row.classList.toggle('active', countActive < 1);\n  }\n});\n\nconst body = document.body;\nconst form = document.createElement('form');\n\n// FORM\n\nform.classList.add('new-employee-form');\n\nform.innerHTML = `\n<label>Name: <input name='name' type='text' data-qa=\"name\" required></label>\n<label>Position: <input name='position' type='text' data-qa=\"position\" required></label>\n<label>Office:\n  <select name=\"office\" id=\"office\" data-qa=\"office\" required>\n    <option value=\"tokyo\">Tokyo</option>\n    <option value=\"singapore\">Singapore</option>\n    <option value=\"london\">London</option>\n    <option value=\"new york\">New York</option>\n    <option value=\"edinburgh\">Edinburgh</option>\n    <option value=\"san francisco\">San Francisco</option>\n  </select>\n</label>\n<label>Age: <input name='age' type='number' data-qa=\"age\" required> </label>\n<label>Salary: <input name='salary' type='number' data-qa=\"salary\" required> </label>\n<button type='submit'>Save to table</button>\n`;\nbody.appendChild(form);\n\n// BUTTON\n\nconst button = body.querySelector(\"[type='submit']\");\nconst createRow = (data) => {\n  const row = document.createElement('tr');\n\n  const convertToString = (num) => {\n    if (num === null || num === undefined || isNaN(+num)) {\n      return '';\n    }\n\n    return `$${(+num).toLocaleString('en-US')}`;\n  };\n\n  row.innerHTML = `\n    <td>${data.name}</td>\n    <td>${data.position}</td>\n    <td>${data.office}</td>\n    <td>${data.age}</td>\n    <td>${convertToString(data.salary)}</td>\n  `;\n\n  tbody.appendChild(row);\n  tbody = table.tBodies[0];\n  tbodyRows = [...tbody.rows];\n};\n// NOTIFICATION\nconst pushNotification = (posRight, title, description, type) => {\n  const posTop = body.offsetHeight / 2 - body.getBoundingClientRect().top;\n  const notification = document.createElement('div');\n  const h2 = document.createElement('h2');\n  const p = document.createElement('p');\n\n  notification.classList.add('notification');\n  notification.classList.add(type);\n  notification.setAttribute('data-qa', 'notification');\n  notification.style.top = `${posTop}px`;\n  notification.style.right = `${posRight}px`;\n\n  h2.textContent = title;\n  p.textContent = description;\n  notification.append(h2, p);\n\n  body.appendChild(notification);\n  setTimeout(() => (notification.style.display = 'none'), 2000);\n};\n\nbutton.addEventListener('click', (e) => {\n  e.preventDefault();\n\n  const formData = new FormData(form);\n  const data = Object.fromEntries(formData.entries());\n\n  const isValide = () => {\n    const checkInput = Object.values(data).every((val) => val !== '');\n    const checkName = data.name.length >= 4;\n    const checkAge = data.age >= 18 && data.age <= 90;\n\n    if (checkInput && checkName && checkAge) {\n      return true;\n    }\n\n    return false;\n  };\n\n  if (isValide()) {\n    createRow(data);\n    pushNotification(10, 'Success', 'Data added successfully', 'success');\n    form.reset();\n  } else {\n    pushNotification(\n      10,\n      'Error',\n      'Please fill in all fields and check valid values',\n      'error',\n    ); // eslint-disable-line\n  }\n});\n\n// DBLCLICK\n\n// eslint-disable-next-line no-shadow\ntbody.addEventListener('dblclick', (event) => {\n  const cell = event.target.closest('td');\n\n  if (cell && cell.cellIndex !== undefined) {\n    const initialValue = cell.textContent.trim();\n    const input = document.createElement('input');\n\n    input.type = 'text';\n    // input.value = initialValue.replace(/[$,]/g, '');\n    input.classList.add('cell-input');\n    cell.innerHTML = '';\n    cell.appendChild(input);\n    input.focus();\n\n    const saveValue = () => {\n      const newValue = input.value.trim();\n\n      if (cell.cellIndex === 4) {\n        // Перевіряємо чи введено коректне числове значення\n        const parsedValue = parseFloat(newValue.replace(/[$,]/g, ''));\n\n        if (isNaN(parsedValue) || parsedValue < 0) {\n          // Якщо некоректне значення, повертаємо попереднє\n          cell.textContent = `$${(+initialValue.replace(/[$,]/g, '')).toLocaleString('en-US')}`;\n        } else {\n          // Форматуємо число як зарплату\n          cell.textContent = `$${parsedValue.toLocaleString('en-US')}`;\n        }\n      } else if (newValue) {\n        // Для інших комірок просто оновлюємо значення\n        cell.textContent = newValue;\n      } else {\n        // Якщо порожнє, повертаємо початкове значення\n        cell.textContent = initialValue;\n      }\n\n      // Видаляємо поле вводу після збереження\n      input.remove();\n    };\n\n    input.addEventListener('blur', saveValue);\n\n    input.addEventListener('keydown', (e) => {\n      if (e.key === 'Enter') {\n        saveValue();\n      }\n    });\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","table","document","querySelector","tbody","tBodies","tbodyRows","rows","toNumber","str","num","parseFloat","replace","isNaN","trim","toLowerCase","addEventListener","event","title","target","closest","row","index","cellIndex","newRows","isSorted","classList","toggle","sort","a","b","valueFirst","concat","cells","innerHTML","valueSecond","localeCompare","forEach","appendChild","rowIndex","countActive","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","r","value","contains","err","return","body","form","createElement","add","button","createRow","data","position","office","age","salary","toLocaleString","pushNotification","posRight","description","type","posTop","offsetHeight","getBoundingClientRect","top","notification","h2","p","setAttribute","style","right","textContent","append","setTimeout","display","e","preventDefault","checkInput","checkName","checkAge","fromEntries","formData","FormData","entries","values","every","val","reset","cell","initialValue","input","focus","saveValue","newValue","parsedValue","remove","key"],"version":3,"file":"index.df27921e.js.map"}